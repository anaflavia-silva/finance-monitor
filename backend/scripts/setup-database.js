const { Pool } = require("pg");
require("dotenv").config();

const setupDatabase = async () => {
  console.log("üîÑ Iniciando setup do banco de dados...");

  const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl:
      process.env.NODE_ENV === "production"
        ? { rejectUnauthorized: false }
        : false,
  });

  try {
    // Testar conex√£o
    await pool.query("SELECT NOW()");
    console.log("‚úÖ Conex√£o com PostgreSQL estabelecida!");

    // Verificar se tabelas j√° existem
    const checkTables = await pool.query(`
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_name IN ('users', 'categories', 'transactions')
        `);

    if (checkTables.rows.length >= 3) {
      console.log("‚úÖ Tabelas j√° existem! Pulando setup...");
      return;
    }

    console.log("üìù Criando tabelas...");

    // Criar tabelas e tipos em sequ√™ncia
    await pool.query(`
            -- Criar tabela de usu√°rios
            CREATE TABLE IF NOT EXISTS users (
                id SERIAL PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                email VARCHAR(255) UNIQUE NOT NULL,
                password VARCHAR(255) NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        `);
    console.log("‚úÖ Tabela users criada");

    // Criar tipos ENUM
    await pool.query(`
            DO $ BEGIN
                CREATE TYPE transaction_type AS ENUM ('income', 'expense');
            EXCEPTION
                WHEN duplicate_object THEN null;
            END $;
        `);

    await pool.query(`
            DO $ BEGIN
                CREATE TYPE category_type AS ENUM ('income', 'expense', 'both');
            EXCEPTION
                WHEN duplicate_object THEN null;
            END $;
        `);
    console.log("‚úÖ Tipos ENUM criados");

    // Criar tabela de categorias
    await pool.query(`
            CREATE TABLE IF NOT EXISTS categories (
                id SERIAL PRIMARY KEY,
                name VARCHAR(100) NOT NULL,
                type category_type DEFAULT 'both',
                user_id INTEGER,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        `);
    console.log("‚úÖ Tabela categories criada");

    // Criar tabela de transa√ß√µes
    await pool.query(`
            CREATE TABLE IF NOT EXISTS transactions (
                id SERIAL PRIMARY KEY,
                description VARCHAR(255) NOT NULL,
                amount DECIMAL(10,2) NOT NULL,
                type transaction_type NOT NULL,
                category VARCHAR(100),
                date DATE NOT NULL,
                user_id INTEGER,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        `);
    console.log("‚úÖ Tabela transactions criada");

    // Criar √≠ndices
    await pool.query(`
            CREATE INDEX IF NOT EXISTS idx_transactions_user_id ON transactions(user_id);
            CREATE INDEX IF NOT EXISTS idx_transactions_date ON transactions(date);
            CREATE INDEX IF NOT EXISTS idx_categories_user_id ON categories(user_id);
        `);
    console.log("‚úÖ √çndices criados");

    // Verificar se categorias padr√£o j√° existem
    const existingCategories = await pool.query(
      "SELECT COUNT(*) FROM categories WHERE user_id IS NULL"
    );

    if (parseInt(existingCategories.rows[0].count) === 0) {
      // Inserir categorias padr√£o
      await pool.query(`
                INSERT INTO categories (name, type, user_id) VALUES
                ('Alimenta√ß√£o', 'expense', NULL),
                ('Transporte', 'expense', NULL),
                ('Contas', 'expense', NULL),
                ('Lazer', 'expense', NULL),
                ('Sa√∫de', 'expense', NULL),
                ('Educa√ß√£o', 'expense', NULL),
                ('Sal√°rio', 'income', NULL),
                ('Freelance', 'income', NULL),
                ('Investimentos', 'income', NULL),
                ('Outros', 'both', NULL)
            `);
      console.log("‚úÖ Categorias padr√£o inseridas");
    } else {
      console.log("‚úÖ Categorias padr√£o j√° existem");
    }

    // Verificar se tudo foi criado
    const finalCheck = await pool.query(`
            SELECT 
                (SELECT COUNT(*) FROM information_schema.tables WHERE table_name = 'users') as users_table,
                (SELECT COUNT(*) FROM information_schema.tables WHERE table_name = 'categories') as categories_table,
                (SELECT COUNT(*) FROM information_schema.tables WHERE table_name = 'transactions') as transactions_table,
                (SELECT COUNT(*) FROM categories WHERE user_id IS NULL) as default_categories
        `);

    const result = finalCheck.rows[0];
    console.log("üìä Verifica√ß√£o final:");
    console.log(`   - Tabela users: ${result.users_table > 0 ? "‚úÖ" : "‚ùå"}`);
    console.log(
      `   - Tabela categories: ${result.categories_table > 0 ? "‚úÖ" : "‚ùå"}`
    );
    console.log(
      `   - Tabela transactions: ${result.transactions_table > 0 ? "‚úÖ" : "‚ùå"}`
    );
    console.log(
      `   - Categorias padr√£o: ${result.default_categories} inseridas`
    );

    console.log("üéâ Setup do banco de dados conclu√≠do com sucesso!");
  } catch (error) {
    console.error("‚ùå Erro ao configurar banco de dados:");
    console.error("   Erro:", error.message);
    console.error("   Stack:", error.stack);
    throw error;
  } finally {
    await pool.end();
  }
};

// Permitir executar diretamente
if (require.main === module) {
  setupDatabase()
    .then(() => {
      console.log("‚úÖ Setup executado com sucesso!");
      process.exit(0);
    })
    .catch((error) => {
      console.error("‚ùå Erro no setup:", error);
      process.exit(1);
    });
}

module.exports = setupDatabase;
